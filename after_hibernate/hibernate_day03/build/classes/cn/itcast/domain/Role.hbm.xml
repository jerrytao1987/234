<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
"-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" >

<!-- 配置表与实体对象的关系 -->
   <!-- package属性:填写一个包名.在元素内部凡是需要书写完整类名的属性,可以直接写简写类名了. -->

<hibernate-mapping package="cn.itcast.domain">

<!-- 
		class元素: 配置实体与表的对应关系的
			name: 完整类名
			table:数据库表名
	 -->

	<class name="Role" table="sys_role">
	
	<!-- id元素:配置主键映射的属性
				name: 填写主键对应属性名
				column(可选): 填写表中的主键列名.默认值:列名会默认使用属性名
				type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
						每个类型有三种填法: java类型|hibernate类型|数据库类型
				not-null(可选):配置该属性(列)是否不能为空. 默认值:false
				length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
		 -->
	
		<id name="role_id">
			<!-- generator:主键生成策略,就是每条记录录入时，主键的生成规则.(7个)
					identity:主键自增，由数据库来维护主键值，录入时不需要指定主键
					sequence:Oracle中的主键生成策略.
					increment(了解):主键自增，由hibernate来维护，每次插入前先查询表中id最大值，+1作为新主键值
					hilo:高低位算法.主键自增，由hibernate来维护,开发时不使用.
					native:hilo+sequence+identity 自动三选一策略.
					uuid:产生随机字符串作为主键.
					assigned:自然主键生成策略.hibernate不会管理主键值，由开发人员自行维护.
			
			 -->
			<generator class="native"></generator>
		</id>
		
		<!-- property元素:除id之外的普通属性映射
				name: 填写属性名
				column(可选): 填写列名
				type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
						每个类型有三种填法: java类型|hibernate类型|数据库类型
				not-null(可选):配置该属性(列)是否不能为空. 默认值:false
				length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
		 -->
		
		<property name="role_name">
			<!--  <column name="cust_name" sql-type="varchar" ></column> -->
		</property>
		<property name="role_memo"></property>
	
		<!-- 多对多关系表达 -->
		<!-- 
			name:集合属性名
			table:配置中间表名
			key
				|-column:外键，别人引用“我"的外键列名
				class:我Yu哪个类是多对多关系
				column:外键，我引用别人的外键列名
				
		 -->
		 <!-- 使用inverse属性
		 		true:放弃维护外键关系
		 		false(默认值):维护外键关系
		 		
		 	      结论：将来在开发中，如果遇到多对多关系，一定要选择一方放弃维护关系,
		 	      一般谁来放弃要看业务方向，例如录入员工时，需要为员工指定所属角色。
		 	  那么业务方向就是由员工维护角色。角色不需要维护与员工关系，角色放弃维护
		  -->
		<set name="users" table="sys_user_role" inverse="true">
			<key column="role_id"></key>
			<many-to-many class="User" column="user_id"></many-to-many>
		</set>
		
		
	</class>
</hibernate-mapping>
