package cn.itcast.tooldemo.httpclient;

import static org.junit.Assert.*;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import javax.swing.text.html.parser.Entity;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.junit.Test;

public class TestHttpClient {
	@Test
	public void get() throws Exception {
		// 1. 创建HttpClient对象。
		CloseableHttpClient httpClient = HttpClients.createDefault();
		// 2.
		// 创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象。
		HttpGet httpGet = new HttpGet("http://localhost/springmvc/editItem?id=1");
		System.out.println("executing request:" + httpGet.getURI());
		// 4. 调用HttpClient对象的execute(HttpUriRequest
		// request)发送请求，该方法返回一个HttpResponse。
		CloseableHttpResponse response = httpClient.execute(httpGet);
		// 5. 调用HttpResponse的getAllHeaders()、getHeaders(String
		// name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。
		HttpEntity entity = response.getEntity();
		System.out.println("-------------------------------------------");
		// 打印响应状态
		System.out.println(response.getStatusLine());
		if (entity != null) {
			// 打印响应内容长度
			System.out.println("response content length:" + entity.getContentLength());
			// 打印响应内容
			System.out.println("response content:" + EntityUtils.toString(entity));
		}
		System.out.println("-------------------------------------------");
		// 6. 释放连接。无论执行方法是否成功，都必须释放连接
		response.close();
		httpClient.close();

	}

	@Test
	public void get1() throws Exception {

		// 创建Httpclient对象
		CloseableHttpClient httpclient = HttpClients.createDefault();

		// 创建http GET请求
		HttpGet httpGet = new HttpGet("http://www.baidu.com/");

		CloseableHttpResponse response = null;
		try {
			// 执行请求
			response = httpclient.execute(httpGet);
			// 判断返回状态是否为200
			if (response.getStatusLine().getStatusCode() == 200) {
				String content = EntityUtils.toString(response.getEntity(), "UTF-8");
				System.out.println("内容长度：" + content.length());
				// FileUtils.writeStringToFile(new File("C:\\baidu.html"),
				// content);
			}
		} finally {
			if (response != null) {
				response.close();
			}
			httpclient.close();
		}

	}

	@Test
	public void post() throws Exception {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		HttpPost httpPost = new HttpPost("http://localhost/springmvc/toLogin");
		// 3. 如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HetpParams
		// params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity
		// entity)方法来设置请求参数。
		// 创建参数队列
		List<NameValuePair> list = new ArrayList<NameValuePair>();
		BasicNameValuePair basicNameValuePair = new BasicNameValuePair("username", "张三");
		list.add(basicNameValuePair);
		UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(list, "UTF-8");
		httpPost.setEntity(urlEncodedFormEntity);

		CloseableHttpResponse response = httpClient.execute(httpPost);
		System.out.println("executing request:" + httpPost.getURI());
		HttpEntity entity = response.getEntity();
		System.out.println(response.getStatusLine());
		Header[] headers = response.getHeaders("location");
		System.out.println(headers[0]);
		if (entity != null) {
			System.out.println("-------------------------------------------");
			System.out.println("response content:" + EntityUtils.toString(entity));
			System.out.println("-------------------------------------------");
		}
		response.close();

		httpClient.close();
	}
}
