<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.itheima.mybatis.mapper.UserMapper">
	<sql id="selector">
		select * from user
	</sql>
	<!-- 通过ID查询一个用户 -->
	<select id="findUserById" parameterType="Integer" resultType="User">
		select * from user where id = #{v}
	</select>
	<!-- 根据用户名称模糊查询用户列表 #{} -select * from user where id = ? 占位符 ？= '五' ${} 
		-select * from user where username like '%五%' 字符串拼接 只能用value -->
	<select id="findUserByUsername" parameterType="String"
		resultType="com.itheima.mybatis.pojo.User">
		select * from user where username like "%"#{v}"%"
	</select>
	<!-- 添加用户 -->
	<insert id="insertUser" parameterType="com.itheima.mybatis.pojo.User">
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user(username,birthday,address,sex)
		values(#{username},#{birthday},#{address},#{sex})
	</insert>
	<!-- 修改用户 -->
	<update id="updateUserById" parameterType="com.itheima.mybatis.pojo.User">
		update user set
		username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
		where id = #{id}
	</update>
	<!-- 删除用户 -->
	<delete id="deleteUserById" parameterType="Integer">
		delete from user where
		id=#{id}
	</delete>

	<!-- 根据用户名称模糊查询用户列表 -->
	<select id="findUserByQueryVo" parameterType="QueryVo"
		resultType="com.itheima.mybatis.pojo.User">
		select * from user where username like
		"%"#{user.username}"%"
	</select>

	<select id="countUser" resultType="Integer">
		select count(*) from user
	</select>
	<!-- 根据性别和名字查询用户 where 可以去掉第一个前AND -->
	<select id="selectUserBySexAndUsername" parameterType="User"
		resultType="User">
		<include refid="selector" />
		<where>
			<if test="sex !=null and sex != ''">
				sex = #{sex}
			</if>
			<if test="username !=null and username != ''">
				and username = #{username}
			</if>
		</where>
	</select>
	<select id="selectUserByIds" parameterType="QueryVo" resultType="User">
		<include refid="selector" />
		<where>

			<!-- <foreach collection="idsList" item="id" separator="," open="id in 
				(" close=")"> #{id} </foreach> -->
			<!-- <foreach collection="array" item="id" separator="," open="id in (" 
				close=")"> #{id} </foreach> -->
			<foreach collection="list" item="id" separator="," open="id in ("
				close=")">
				#{id}
			</foreach>
		</where>
	</select>
	<resultMap type="User" id="user">
		<id property="id" column="id" />
		<result property="username" column="username" />
		<result property="birthday" column="birthday" />
		<result property="sex" column="sex" />
		<result property="address" column="address" />

		<!-- 配置一对多的关系 -->
		<collection property="ordersList" javaType="List" ofType="Orders">
			<!-- 配置主键，是关联Order的唯一标识 -->
			<id property="id" column="oid" />
			<result property="number" column="number" />
			<result property="createtime" column="createtime" />
			<result property="note" column="note" />
		</collection>

	</resultMap>
	<select id="selectUserList" resultMap="user">
		select
		u.id,u.username,u.birthday,u.sex,u.address,o.id	oid,o.number,o.createtime,o.note
		from user u
		left join orders o
		on o.user_id = u.id
	</select>
</mapper>
